// Generated by Copilot
const prisma = require('../prisma/client');

// Función para manejar errores comunes
const handleError = (error, res, next) => {
  if (error.code === 'P2025') {
    return res.status(404).json({ error: 'Factura no encontrada' });
  }
  next(error);
};

// Validar ID
const validateId = (id, res) => {
  const parsedId = Number(id);
  if (isNaN(parsedId)) {
    res.status(400).json({ error: 'ID inválido' });
    return null;
  }
  return parsedId;
};

// Obtener todas las facturas
exports.getAll = async (req, res, next) => {
  try {
    const facturas = await prisma.factura.findMany();
    res.json(facturas);
  } catch (error) {
    handleError(error, res, next);
  }
};

// Obtener una factura por ID
exports.getById = async (req, res, next) => {
  const id = validateId(req.params.id, res);
  if (!id) return;

  try {
    const factura = await prisma.factura.findUnique({ where: { id } });
    if (!factura) {
      return res.status(404).json({ error: 'Factura no encontrada' });
    }
    res.json(factura);
  } catch (error) {
    handleError(error, res, next);
  }
};

// Crear una nueva factura
exports.create = async (req, res, next) => {
  try {
    const nuevaFactura = await prisma.factura.create({ data: req.body });
    res.status(201).json(nuevaFactura);
  } catch (error) {
    handleError(error, res, next);
  }
};

// Actualizar una factura
exports.update = async (req, res, next) => {
  const id = validateId(req.params.id, res);
  if (!id) return;

  try {
    const facturaActualizada = await prisma.factura.update({
      where: { id },
      data: req.body,
    });
    res.json(facturaActualizada);
  } catch (error) {
    handleError(error, res, next);
  }
};

// Eliminar una factura
exports.delete = async (req, res, next) => {
  const id = validateId(req.params.id, res);
  if (!id) return;

  try {
    await prisma.factura.delete({ where: { id } });
    res.status(204).send();
  } catch (error) {
    handleError(error, res, next);
  }
};
