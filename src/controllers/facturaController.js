// Generated by Copilot
const prisma = require('../prisma/client');
const Joi = require('joi');

// Esquema de validaciÃ³n para factura
const facturaSchema = Joi.object({
  numero: Joi.string().required(),
  fecha: Joi.date().required(),
  total: Joi.number().required(),
  usuarioId: Joi.number().integer().required(),
  clienteId: Joi.number().integer().required(),
  pdfUrl: Joi.string().uri().allow(null, '')
});

exports.getAll = async (req, res) => {
  try {
    const facturas = await prisma.factura.findMany();
    res.json(facturas);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener facturas' });
  }
};

exports.getById = async (req, res) => {
  try {
    const factura = await prisma.factura.findUnique({
      where: { id: Number(req.params.id) }
    });
    if (!factura) return res.status(404).json({ error: 'Factura no encontrada' });
    res.json(factura);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener factura' });
  }
};

exports.create = async (req, res) => {
  const { error } = facturaSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });
  try {
    const factura = await prisma.factura.create({ data: req.body });
    res.status(201).json(factura);
  } catch (err) {
    res.status(500).json({ error: 'Error al crear factura' });
  }
};

exports.update = async (req, res) => {
  const { error } = facturaSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });
  try {
    const factura = await prisma.factura.update({
      where: { id: Number(req.params.id) },
      data: req.body
    });
    res.json(factura);
  } catch (err) {
    res.status(500).json({ error: 'Error al actualizar factura' });
  }
};

exports.delete = async (req, res) => {
  try {
    await prisma.factura.delete({ where: { id: Number(req.params.id) } });
    res.json({ message: 'Factura eliminada' });
  } catch (err) {
    res.status(500).json({ error: 'Error al eliminar factura' });
  }
};
