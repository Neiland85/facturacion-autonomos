// Generated by Copilot
const prisma = require('../prisma/client');
const Joi = require('joi');

// Esquema de validación mejorado para usuario
const usuarioSchema = Joi.object({
  nombre: Joi.string().min(2).max(100).required(),
  email: Joi.string().email().required(),
  password: Joi.string()
    .min(8)
    .max(64)
    .pattern(/[A-Z]/, 'mayúscula')
    .pattern(/[a-z]/, 'minúscula')
    .pattern(/[0-9]/, 'número')
    .pattern(/[^A-Za-z0-9]/, 'carácter especial')
    .required(),
  telefono: Joi.string().pattern(/^\+?\d{9,15}$/).optional(),
  rol: Joi.string().valid('admin', 'usuario', 'cliente').optional()
});

exports.getAll = async (req, res) => {
  try {
    const usuarios = await prisma.usuario.findMany();
    res.json(usuarios);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener usuarios' });
  }
};

exports.getById = async (req, res) => {
  try {
    const usuario = await prisma.usuario.findUnique({
      where: { id: Number(req.params.id) }
    });
    if (!usuario) return res.status(404).json({ error: 'Usuario no encontrado' });
    res.json(usuario);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener usuario' });
  }
};

exports.create = async (req, res) => {
  const { error } = usuarioSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });
  try {
    const usuario = await prisma.usuario.create({ data: req.body });
    res.status(201).json(usuario);
  } catch (err) {
    res.status(500).json({ error: 'Error al crear usuario' });
  }
};

exports.update = async (req, res) => {
  const { error } = usuarioSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });
  try {
    const usuario = await prisma.usuario.update({
      where: { id: Number(req.params.id) },
      data: req.body
    });
    res.json(usuario);
  } catch (err) {
    res.status(500).json({ error: 'Error al actualizar usuario' });
  }
};

exports.delete = async (req, res) => {
  try {
    await prisma.usuario.delete({ where: { id: Number(req.params.id) } });
    res.json({ message: 'Usuario eliminado' });
  } catch (err) {
    res.status(500).json({ error: 'Error al eliminar usuario' });
  }
};
