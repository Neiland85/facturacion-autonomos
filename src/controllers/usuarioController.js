// Generated by Copilot
const prisma = require('../prisma/client');
const Joi = require('joi');

// Esquema de validaciÃ³n para usuario
const usuarioSchema = Joi.object({
  nombre: Joi.string().required(),
  email: Joi.string().email().required(),
  password: Joi.string().min(6).required()
});

exports.getAll = async (req, res) => {
  try {
    const usuarios = await prisma.usuario.findMany();
    res.json(usuarios);
  } catch (error) {
    console.error('Error al obtener usuarios:', error);
    res.status(500).json({ error: 'Error al obtener usuarios' });
  }
};

exports.getById = async (req, res) => {
  try {
    const usuario = await prisma.usuario.findUnique({
      where: { id: Number(req.params.id) }
    });
    if (!usuario) return res.status(404).json({ error: 'Usuario no encontrado' });
    res.json(usuario);
  } catch {
    res.status(500).json({ error: 'Error al obtener usuario' });
  }
};

exports.create = async (req, res) => {
  const { error } = usuarioSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });
  try {
    const usuario = await prisma.usuario.create({ data: req.body });
    res.status(201).json(usuario);
  } catch {
    res.status(500).json({ error: 'Error al crear usuario' });
  }
};

exports.update = async (req, res) => {
  const { error } = usuarioSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });
  try {
    const usuario = await prisma.usuario.update({
      where: { id: Number(req.params.id) },
      data: req.body
    });
    res.json(usuario);
  } catch {
    res.status(500).json({ error: 'Error al actualizar usuario' });
  }
};

exports.delete = async (req, res) => {
  try {
    await prisma.usuario.delete({ where: { id: Number(req.params.id) } });
    res.json({ message: 'Usuario eliminado' });
  } catch {
    res.status(500).json({ error: 'Error al eliminar usuario' });
  }
};
