// Generated by Copilot
const prisma = require('../prisma/client');

// Obtener todos los clientes
exports.getAll = async (req, res, next) => {
  try {
    const clientes = await prisma.cliente.findMany();
    res.json(clientes);
  } catch (error) {
    next(error);
  }
};

// Obtener un cliente por ID
exports.getById = async (req, res, next) => {
  try {
    const cliente = await prisma.cliente.findUnique({
      where: { id: Number(req.params.id) },
    });
    if (!cliente) {
      return res.status(404).json({ error: 'Cliente no encontrado' });
    }
    res.json(cliente);
  } catch (error) {
    next(error);
  }
};

// Crear un nuevo cliente
exports.create = async (req, res, next) => {
  try {
    const nuevoCliente = await prisma.cliente.create({
      data: req.body,
    });
    res.status(201).json(nuevoCliente);
  } catch (error) {
    next(error);
  }
};

// Actualizar un cliente
exports.update = async (req, res, next) => {
  try {
    const clienteActualizado = await prisma.cliente.update({
      where: { id: Number(req.params.id) },
      data: req.body,
    });
    res.json(clienteActualizado);
  } catch (error) {
    if (error.code === 'P2025') {
      return res.status(404).json({ error: 'Cliente no encontrado' });
    }
    next(error);
  }
};

// Eliminar un cliente
exports.delete = async (req, res, next) => {
  try {
    await prisma.cliente.delete({
      where: { id: Number(req.params.id) },
    });
    res.status(204).send();
  } catch (error) {
    if (error.code === 'P2025') {
      return res.status(404).json({ error: 'Cliente no encontrado' });
    }
    next(error);
  }
};
