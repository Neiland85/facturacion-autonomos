// Generated by Copilot
const prisma = require('../prisma/client');
const Joi = require('joi');

// Esquema de validaciÃ³n para cliente
const clienteSchema = Joi.object({
  nombre: Joi.string().required(),
  email: Joi.string().email().required(),
  direccion: Joi.string().required(),
  usuarioId: Joi.number().integer().required()
});

exports.getAll = async (req, res) => {
  try {
    const clientes = await prisma.cliente.findMany();
    res.json(clientes);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener clientes' });
  }
};

exports.getById = async (req, res) => {
  try {
    const cliente = await prisma.cliente.findUnique({
      where: { id: Number(req.params.id) }
    });
    if (!cliente) return res.status(404).json({ error: 'Cliente no encontrado' });
    res.json(cliente);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener cliente' });
  }
};

exports.create = async (req, res) => {
  const { error } = clienteSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });
  try {
    const cliente = await prisma.cliente.create({ data: req.body });
    res.status(201).json(cliente);
  } catch (err) {
    res.status(500).json({ error: 'Error al crear cliente' });
  }
};

exports.update = async (req, res) => {
  const { error } = clienteSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });
  try {
    const cliente = await prisma.cliente.update({
      where: { id: Number(req.params.id) },
      data: req.body
    });
    res.json(cliente);
  } catch (err) {
    res.status(500).json({ error: 'Error al actualizar cliente' });
  }
};

exports.delete = async (req, res) => {
  try {
    await prisma.cliente.delete({ where: { id: Number(req.params.id) } });
    res.json({ message: 'Cliente eliminado' });
  } catch (err) {
    res.status(500).json({ error: 'Error al eliminar cliente' });
  }
};
